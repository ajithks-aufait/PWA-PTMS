/// <reference lib="webworker" />

import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies'
import { BackgroundSyncPlugin } from 'workbox-background-sync'

declare const self: ServiceWorkerGlobalScope

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  new StaleWhileRevalidate({
    cacheName: 'asset-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
)

// Cache images with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'image-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
)

// Background Sync for offline API requests
const bgSyncPlugin = new BackgroundSyncPlugin('api-queue', {
  maxRetentionTime: 24 * 60, // Retry for max of 24 Hours (specified in minutes)
})

// Cache API GET requests with Network First strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/') && url.searchParams.get('method') !== 'POST' && url.searchParams.get('method') !== 'PATCH',
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
)

// Handle POST and PATCH requests with Background Sync
registerRoute(
  ({ url }) => {
    const method = url.searchParams.get('method')
    return url.pathname.startsWith('/api/') && (method === 'POST' || method === 'PATCH')
  },
  new NetworkFirst({
    cacheName: 'api-mutations',
    plugins: [bgSyncPlugin],
  })
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && typeof event.data === 'object') {
    if (event.data.type === 'SKIP_WAITING') {
      self.skipWaiting()
    }
  }
})

// Primary Navigation Handler - This is the key for offline page persistence
// Handles ALL navigation requests and serves index.html for SPA routing
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'spa-navigation-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
    // Always fallback to index.html for SPA routes
    fallback: async () => {
      const cache = await caches.open('spa-navigation-cache')
      const cachedResponse = await cache.match('/index.html')
      
      if (cachedResponse) {
        return cachedResponse
      }
      
      // If no cached version, return a basic HTML response
      return new Response(
        `<!DOCTYPE html>
        <html>
          <head>
            <title>Task Manager PWA</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <meta name="theme-color" content="#3B82F6">
            <link rel="manifest" href="/manifest.webmanifest">
          </head>
          <body>
            <div id="root">Loading...</div>
            <script>
              // Basic offline fallback
              if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js');
              }
            </script>
          </body>
        </html>`,
        {
          headers: {
            'Content-Type': 'text/html',
          },
        }
      )
    },
  })
)

// Cache the main index.html file specifically for offline access
registerRoute(
  ({ url }) => url.pathname === '/' || url.pathname === '/index.html',
  new NetworkFirst({
    cacheName: 'main-page-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
)

// Specific route caching for better offline experience
const spaRoutes = ['/tasks', '/create', '/welcome']

spaRoutes.forEach(route => {
  registerRoute(
    ({ url }) => url.pathname === route,
    new NetworkFirst({
      cacheName: `spa-route-${route.replace('/', '')}`,
      plugins: [
        new ExpirationPlugin({
          maxEntries: 5,
          maxAgeSeconds: 24 * 60 * 60, // 24 hours
        }),
      ],
      // Always fallback to index.html for SPA routes
      fallback: async () => {
        const cache = await caches.open('main-page-cache')
        return await cache.match('/index.html') || 
               await cache.match('/') ||
               new Response('Offline - Please check your connection', {
                 status: 503,
                 statusText: 'Service Unavailable'
               })
      }
    })
  )
})

// Catch-all handler for any other navigation requests
registerRoute(
  ({ request, url }) => {
    // Only handle navigation requests that are not API calls and not file requests
    return request.mode === 'navigate' && 
           !url.pathname.startsWith('/api/') &&
           !url.pathname.includes('.') && // Exclude file requests
           !url.pathname.startsWith('/_') // Exclude internal routes
  },
  new NetworkFirst({
    cacheName: 'spa-fallback-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 20,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
    // Always serve index.html for any navigation request
    fallback: async () => {
      const cache = await caches.open('main-page-cache')
      return await cache.match('/index.html') || 
             await cache.match('/') ||
             new Response('Offline - Please check your connection', {
               status: 503,
               statusText: 'Service Unavailable'
             })
    }
  })
)
